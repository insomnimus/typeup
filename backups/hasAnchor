func hasAnchor(s []rune, start int) (*ast.Anchor, int) {
	if s[start] != '[' {
		return nil, -1
	}
	var (
		buff strings.Builder
		ch   rune
		pos  = start
	)
	for i := start; i < len(s); i++ {
		if i+1 == len(s) {
			return nil, -1
		}
		ch = s[i]
		if ch == ']' {
			pos = i + 1
			break
		}
		buff.WriteRune(ch)
	}
	if unicode.IsSpace(s[pos]) {
		return nil, -1
	}
	text := strings.TrimSpace(buff.String())
	buff.Reset()
	for i := pos; i < len(s); i++ {
		ch = s[i]
		if unicode.IsSpace(ch) {
			pos = i
			break
		}
		buff.WriteRune(ch)
	}
	href := buff.String()
	if href == "" {
		return nil, -1
	}
	if text == "" {
		text = href
	}
	return &ast.Anchor{Text: processText(text), URL: href}, pos
}